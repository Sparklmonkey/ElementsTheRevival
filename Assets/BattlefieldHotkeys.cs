//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/BattlefieldHotkeys.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BattlefieldHotkeys: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BattlefieldHotkeys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BattlefieldHotkeys"",
    ""maps"": [
        {
            ""name"": ""Shortcuts"",
            ""id"": ""cfd5d95c-72f0-486b-a466-b05afea7b210"",
            ""actions"": [
                {
                    ""name"": ""PlayHandCards"",
                    ""type"": ""Button"",
                    ""id"": ""6fc4e6f4-2006-49a4-a80e-e653bb36b7c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartGame"",
                    ""type"": ""Button"",
                    ""id"": ""848c4cf8-bf24-4c5f-9882-88a6263c14d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SurrenderGame"",
                    ""type"": ""Button"",
                    ""id"": ""db3ba314-b505-4925-a895-aa17889c2fe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06f63ab2-2deb-49fc-ae62-77bfd433c267"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48aa44ac-51b5-40f1-9638-f42948e04477"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1c445d6-cb43-4abf-8cc5-ff51785a98cd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SurrenderGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67ee8219-1b7c-406c-89b2-628d196ea4b7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""378a8de5-81e6-4557-9826-1197938d159d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f1a6066-c059-4592-a6e5-c8bf9d56184b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0b0636-2a16-470e-9352-dd0985bfce98"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eec2d58b-aae0-4e92-bf9f-3f9a7275ac17"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4aef0152-e538-40d9-803a-03bf525e8ac6"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77706a8c-155f-4725-9107-dbcbacacb5a9"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BattlefieldHotkeys"",
            ""bindingGroup"": ""BattlefieldHotkeys"",
            ""devices"": []
        }
    ]
}");
        // Shortcuts
        m_Shortcuts = asset.FindActionMap("Shortcuts", throwIfNotFound: true);
        m_Shortcuts_PlayHandCards = m_Shortcuts.FindAction("PlayHandCards", throwIfNotFound: true);
        m_Shortcuts_RestartGame = m_Shortcuts.FindAction("RestartGame", throwIfNotFound: true);
        m_Shortcuts_SurrenderGame = m_Shortcuts.FindAction("SurrenderGame", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shortcuts
    private readonly InputActionMap m_Shortcuts;
    private List<IShortcutsActions> m_ShortcutsActionsCallbackInterfaces = new List<IShortcutsActions>();
    private readonly InputAction m_Shortcuts_PlayHandCards;
    private readonly InputAction m_Shortcuts_RestartGame;
    private readonly InputAction m_Shortcuts_SurrenderGame;
    public struct ShortcutsActions
    {
        private @BattlefieldHotkeys m_Wrapper;
        public ShortcutsActions(@BattlefieldHotkeys wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayHandCards => m_Wrapper.m_Shortcuts_PlayHandCards;
        public InputAction @RestartGame => m_Wrapper.m_Shortcuts_RestartGame;
        public InputAction @SurrenderGame => m_Wrapper.m_Shortcuts_SurrenderGame;
        public InputActionMap Get() { return m_Wrapper.m_Shortcuts; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShortcutsActions set) { return set.Get(); }
        public void AddCallbacks(IShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Add(instance);
            @PlayHandCards.started += instance.OnPlayHandCards;
            @PlayHandCards.performed += instance.OnPlayHandCards;
            @PlayHandCards.canceled += instance.OnPlayHandCards;
            @RestartGame.started += instance.OnRestartGame;
            @RestartGame.performed += instance.OnRestartGame;
            @RestartGame.canceled += instance.OnRestartGame;
            @SurrenderGame.started += instance.OnSurrenderGame;
            @SurrenderGame.performed += instance.OnSurrenderGame;
            @SurrenderGame.canceled += instance.OnSurrenderGame;
        }

        private void UnregisterCallbacks(IShortcutsActions instance)
        {
            @PlayHandCards.started -= instance.OnPlayHandCards;
            @PlayHandCards.performed -= instance.OnPlayHandCards;
            @PlayHandCards.canceled -= instance.OnPlayHandCards;
            @RestartGame.started -= instance.OnRestartGame;
            @RestartGame.performed -= instance.OnRestartGame;
            @RestartGame.canceled -= instance.OnRestartGame;
            @SurrenderGame.started -= instance.OnSurrenderGame;
            @SurrenderGame.performed -= instance.OnSurrenderGame;
            @SurrenderGame.canceled -= instance.OnSurrenderGame;
        }

        public void RemoveCallbacks(IShortcutsActions instance)
        {
            if (m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShortcutsActions @Shortcuts => new ShortcutsActions(this);
    private int m_BattlefieldHotkeysSchemeIndex = -1;
    public InputControlScheme BattlefieldHotkeysScheme
    {
        get
        {
            if (m_BattlefieldHotkeysSchemeIndex == -1) m_BattlefieldHotkeysSchemeIndex = asset.FindControlSchemeIndex("BattlefieldHotkeys");
            return asset.controlSchemes[m_BattlefieldHotkeysSchemeIndex];
        }
    }
    public interface IShortcutsActions
    {
        void OnPlayHandCards(InputAction.CallbackContext context);
        void OnRestartGame(InputAction.CallbackContext context);
        void OnSurrenderGame(InputAction.CallbackContext context);
    }
}
