//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.0
//     from Assets/BattlefieldHotkeys.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/BattlefieldHotkeys.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @BattlefieldHotkeys: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @BattlefieldHotkeys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BattlefieldHotkeys"",
    ""maps"": [
        {
            ""name"": ""Shortcuts"",
            ""id"": ""cfd5d95c-72f0-486b-a466-b05afea7b210"",
            ""actions"": [
                {
                    ""name"": ""PlayHandCards"",
                    ""type"": ""Button"",
                    ""id"": ""6fc4e6f4-2006-49a4-a80e-e653bb36b7c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RestartGame"",
                    ""type"": ""Button"",
                    ""id"": ""848c4cf8-bf24-4c5f-9882-88a6263c14d2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SurrenderGame"",
                    ""type"": ""Button"",
                    ""id"": ""db3ba314-b505-4925-a895-aa17889c2fe6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""06f63ab2-2deb-49fc-ae62-77bfd433c267"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48aa44ac-51b5-40f1-9638-f42948e04477"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RestartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1c445d6-cb43-4abf-8cc5-ff51785a98cd"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SurrenderGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""67ee8219-1b7c-406c-89b2-628d196ea4b7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""378a8de5-81e6-4557-9826-1197938d159d"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f1a6066-c059-4592-a6e5-c8bf9d56184b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b0b0636-2a16-470e-9352-dd0985bfce98"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eec2d58b-aae0-4e92-bf9f-3f9a7275ac17"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4aef0152-e538-40d9-803a-03bf525e8ac6"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77706a8c-155f-4725-9107-dbcbacacb5a9"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayHandCards"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DashboardShortcuts"",
            ""id"": ""3f53b2d2-bce1-4853-801e-4fa93f11864b"",
            ""actions"": [
                {
                    ""name"": ""StartDuel"",
                    ""type"": ""Button"",
                    ""id"": ""21ceeda9-3c89-4878-9f2a-9a9d184e8788"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StartPvP"",
                    ""type"": ""Button"",
                    ""id"": ""94322bd9-f05f-4675-b669-33b530755271"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2786d56-af47-4eab-af08-d1abb8119220"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b68bd9e2-542a-4356-95f4-9095bcde281f"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a38b157f-b0d9-476b-9cf1-845f8ee7291a"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91cac276-8e04-4b6c-a584-33d40f21a96c"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8d6da594-3ba8-4719-a4cd-f483c7af4e5b"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""456ef855-294c-4af0-a74c-b55c5d6248fc"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12bd8c23-2bda-402d-b332-646b1eaaa867"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartDuel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""26f5df22-a7cd-470b-9c02-55a73227cc4c"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""DashboardShortcuts"",
                    ""action"": ""StartPvP"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""BattlefieldHotkeys"",
            ""bindingGroup"": ""BattlefieldHotkeys"",
            ""devices"": []
        },
        {
            ""name"": ""DashboardShortcuts"",
            ""bindingGroup"": ""DashboardShortcuts"",
            ""devices"": []
        }
    ]
}");
        // Shortcuts
        m_Shortcuts = asset.FindActionMap("Shortcuts", throwIfNotFound: true);
        m_Shortcuts_PlayHandCards = m_Shortcuts.FindAction("PlayHandCards", throwIfNotFound: true);
        m_Shortcuts_RestartGame = m_Shortcuts.FindAction("RestartGame", throwIfNotFound: true);
        m_Shortcuts_SurrenderGame = m_Shortcuts.FindAction("SurrenderGame", throwIfNotFound: true);
        // DashboardShortcuts
        m_DashboardShortcuts = asset.FindActionMap("DashboardShortcuts", throwIfNotFound: true);
        m_DashboardShortcuts_StartDuel = m_DashboardShortcuts.FindAction("StartDuel", throwIfNotFound: true);
        m_DashboardShortcuts_StartPvP = m_DashboardShortcuts.FindAction("StartPvP", throwIfNotFound: true);
    }

    ~@BattlefieldHotkeys()
    {
        UnityEngine.Debug.Assert(!m_Shortcuts.enabled, "This will cause a leak and performance issues, BattlefieldHotkeys.Shortcuts.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_DashboardShortcuts.enabled, "This will cause a leak and performance issues, BattlefieldHotkeys.DashboardShortcuts.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shortcuts
    private readonly InputActionMap m_Shortcuts;
    private List<IShortcutsActions> m_ShortcutsActionsCallbackInterfaces = new List<IShortcutsActions>();
    private readonly InputAction m_Shortcuts_PlayHandCards;
    private readonly InputAction m_Shortcuts_RestartGame;
    private readonly InputAction m_Shortcuts_SurrenderGame;
    /// <summary>
    /// Provides access to input actions defined in input action map "Shortcuts".
    /// </summary>
    public struct ShortcutsActions
    {
        private @BattlefieldHotkeys m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public ShortcutsActions(@BattlefieldHotkeys wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Shortcuts/PlayHandCards".
        /// </summary>
        public InputAction @PlayHandCards => m_Wrapper.m_Shortcuts_PlayHandCards;
        /// <summary>
        /// Provides access to the underlying input action "Shortcuts/RestartGame".
        /// </summary>
        public InputAction @RestartGame => m_Wrapper.m_Shortcuts_RestartGame;
        /// <summary>
        /// Provides access to the underlying input action "Shortcuts/SurrenderGame".
        /// </summary>
        public InputAction @SurrenderGame => m_Wrapper.m_Shortcuts_SurrenderGame;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Shortcuts; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="ShortcutsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(ShortcutsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="ShortcutsActions" />
        public void AddCallbacks(IShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Add(instance);
            @PlayHandCards.started += instance.OnPlayHandCards;
            @PlayHandCards.performed += instance.OnPlayHandCards;
            @PlayHandCards.canceled += instance.OnPlayHandCards;
            @RestartGame.started += instance.OnRestartGame;
            @RestartGame.performed += instance.OnRestartGame;
            @RestartGame.canceled += instance.OnRestartGame;
            @SurrenderGame.started += instance.OnSurrenderGame;
            @SurrenderGame.performed += instance.OnSurrenderGame;
            @SurrenderGame.canceled += instance.OnSurrenderGame;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="ShortcutsActions" />
        private void UnregisterCallbacks(IShortcutsActions instance)
        {
            @PlayHandCards.started -= instance.OnPlayHandCards;
            @PlayHandCards.performed -= instance.OnPlayHandCards;
            @PlayHandCards.canceled -= instance.OnPlayHandCards;
            @RestartGame.started -= instance.OnRestartGame;
            @RestartGame.performed -= instance.OnRestartGame;
            @RestartGame.canceled -= instance.OnRestartGame;
            @SurrenderGame.started -= instance.OnSurrenderGame;
            @SurrenderGame.performed -= instance.OnSurrenderGame;
            @SurrenderGame.canceled -= instance.OnSurrenderGame;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="ShortcutsActions.UnregisterCallbacks(IShortcutsActions)" />.
        /// </summary>
        /// <seealso cref="ShortcutsActions.UnregisterCallbacks(IShortcutsActions)" />
        public void RemoveCallbacks(IShortcutsActions instance)
        {
            if (m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="ShortcutsActions.AddCallbacks(IShortcutsActions)" />
        /// <seealso cref="ShortcutsActions.RemoveCallbacks(IShortcutsActions)" />
        /// <seealso cref="ShortcutsActions.UnregisterCallbacks(IShortcutsActions)" />
        public void SetCallbacks(IShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="ShortcutsActions" /> instance referencing this action map.
    /// </summary>
    public ShortcutsActions @Shortcuts => new ShortcutsActions(this);

    // DashboardShortcuts
    private readonly InputActionMap m_DashboardShortcuts;
    private List<IDashboardShortcutsActions> m_DashboardShortcutsActionsCallbackInterfaces = new List<IDashboardShortcutsActions>();
    private readonly InputAction m_DashboardShortcuts_StartDuel;
    private readonly InputAction m_DashboardShortcuts_StartPvP;
    /// <summary>
    /// Provides access to input actions defined in input action map "DashboardShortcuts".
    /// </summary>
    public struct DashboardShortcutsActions
    {
        private @BattlefieldHotkeys m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public DashboardShortcutsActions(@BattlefieldHotkeys wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "DashboardShortcuts/StartDuel".
        /// </summary>
        public InputAction @StartDuel => m_Wrapper.m_DashboardShortcuts_StartDuel;
        /// <summary>
        /// Provides access to the underlying input action "DashboardShortcuts/StartPvP".
        /// </summary>
        public InputAction @StartPvP => m_Wrapper.m_DashboardShortcuts_StartPvP;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_DashboardShortcuts; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="DashboardShortcutsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(DashboardShortcutsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="DashboardShortcutsActions" />
        public void AddCallbacks(IDashboardShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_DashboardShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DashboardShortcutsActionsCallbackInterfaces.Add(instance);
            @StartDuel.started += instance.OnStartDuel;
            @StartDuel.performed += instance.OnStartDuel;
            @StartDuel.canceled += instance.OnStartDuel;
            @StartPvP.started += instance.OnStartPvP;
            @StartPvP.performed += instance.OnStartPvP;
            @StartPvP.canceled += instance.OnStartPvP;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="DashboardShortcutsActions" />
        private void UnregisterCallbacks(IDashboardShortcutsActions instance)
        {
            @StartDuel.started -= instance.OnStartDuel;
            @StartDuel.performed -= instance.OnStartDuel;
            @StartDuel.canceled -= instance.OnStartDuel;
            @StartPvP.started -= instance.OnStartPvP;
            @StartPvP.performed -= instance.OnStartPvP;
            @StartPvP.canceled -= instance.OnStartPvP;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="DashboardShortcutsActions.UnregisterCallbacks(IDashboardShortcutsActions)" />.
        /// </summary>
        /// <seealso cref="DashboardShortcutsActions.UnregisterCallbacks(IDashboardShortcutsActions)" />
        public void RemoveCallbacks(IDashboardShortcutsActions instance)
        {
            if (m_Wrapper.m_DashboardShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="DashboardShortcutsActions.AddCallbacks(IDashboardShortcutsActions)" />
        /// <seealso cref="DashboardShortcutsActions.RemoveCallbacks(IDashboardShortcutsActions)" />
        /// <seealso cref="DashboardShortcutsActions.UnregisterCallbacks(IDashboardShortcutsActions)" />
        public void SetCallbacks(IDashboardShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_DashboardShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DashboardShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="DashboardShortcutsActions" /> instance referencing this action map.
    /// </summary>
    public DashboardShortcutsActions @DashboardShortcuts => new DashboardShortcutsActions(this);
    private int m_BattlefieldHotkeysSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme BattlefieldHotkeysScheme
    {
        get
        {
            if (m_BattlefieldHotkeysSchemeIndex == -1) m_BattlefieldHotkeysSchemeIndex = asset.FindControlSchemeIndex("BattlefieldHotkeys");
            return asset.controlSchemes[m_BattlefieldHotkeysSchemeIndex];
        }
    }
    private int m_DashboardShortcutsSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme DashboardShortcutsScheme
    {
        get
        {
            if (m_DashboardShortcutsSchemeIndex == -1) m_DashboardShortcutsSchemeIndex = asset.FindControlSchemeIndex("DashboardShortcuts");
            return asset.controlSchemes[m_DashboardShortcutsSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Shortcuts" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="ShortcutsActions.AddCallbacks(IShortcutsActions)" />
    /// <seealso cref="ShortcutsActions.RemoveCallbacks(IShortcutsActions)" />
    public interface IShortcutsActions
    {
        /// <summary>
        /// Method invoked when associated input action "PlayHandCards" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPlayHandCards(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RestartGame" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRestartGame(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SurrenderGame" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSurrenderGame(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "DashboardShortcuts" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="DashboardShortcutsActions.AddCallbacks(IDashboardShortcutsActions)" />
    /// <seealso cref="DashboardShortcutsActions.RemoveCallbacks(IDashboardShortcutsActions)" />
    public interface IDashboardShortcutsActions
    {
        /// <summary>
        /// Method invoked when associated input action "StartDuel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStartDuel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "StartPvP" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnStartPvP(InputAction.CallbackContext context);
    }
}
